

# Upstream backend server
upstream api_backend {
    server 127.0.0.1:8082;
    keepalive 32;
}

# --- Map untuk CORS Origin yang aman (pakai Origin dinamis, bukan *) ---
map $http_origin $cors_allow_origin {
    default "";

    # Izinkan origin yang spesifik
    ~^http://localhost:5173$ $http_origin;
    ~^http://localhost:8082$ $http_origin;
    ~^https://(.+\.)?your-domain\.tld$ $http_origin;
}

# Map untuk menentukan apakah origin diizinkan
map $http_origin $cors_allowed {
    default 0;
    ~^http://localhost:5173$ 1;
    ~^http://localhost:8082$ 1;
    ~^https://(.+\.)?your-domain\.tld$ 1;
}

server {
    server_name api.your-domain.tld;

    # Handle preflight OPTIONS requests first
    location / {
        # Always add CORS headers for allowed origins
        set $cors_origin "";
        if ($http_origin ~* ^https?://(.*\.)?your-domain\.tld$) {
            set $cors_origin $http_origin;
        }
        if ($http_origin = "http://localhost:5173") {
            set $cors_origin $http_origin;
        }
        if ($http_origin = "http://localhost:8082") {
            set $cors_origin $http_origin;
        }

        # Handle preflight OPTIONS requests
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept,Origin,X-CSRF-Token,Content-Length,x-session-id,x-client-id,X-API-Key,X-Request-ID' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        # Proxy ke backend
        proxy_pass http://api_backend;

        # Header standar proxy
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection        "";
        
        # Hapus header yang mungkin sudah ada dari upstream untuk mencegah duplikasi
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        proxy_hide_header Access-Control-Allow-Credentials;
        
        # Tambahkan CORS headers untuk response normal
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept,Origin,X-CSRF-Token,Content-Length,x-session-id,X-Client-ID,X-API-Key,X-Request-ID' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Timeout settings
        proxy_connect_timeout       60s;
        proxy_send_timeout          60s;
        proxy_read_timeout          60s;
        
        # Buffer settings
        proxy_buffering             on;
        proxy_buffer_size           4k;
        proxy_buffers               8 4k;
     }

    # -------------------------
    # Error pages
    # -------------------------    error_page 502 /503.html;
    error_page 502 /503.html;
    error_page 503 /503.html;
    location = /503.html {
        root /var/www/html;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/api.your-domain.tld/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/api.your-domain.tld/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    if ($host = api.your-domain.tld) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    server_name api.your-domain.tld;
    return 404; # managed by Certbot
}


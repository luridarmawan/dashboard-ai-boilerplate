{
  "openapi": "3.0.3",
  "info": {
    "title": "Dashboard Management API",
    "version": "1.0.0",
    "description": "A comprehensive API for user authentication and management with role-based permissions",
    "contact": {
      "name": "API Support",
      "email": "app@carik.id"
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from login endpoint"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "description": "Unique user identifier (UUIDv7)"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "example": "johndoe"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Software Developer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00.000Z"
          }
        }
      },
      "UserWithStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "properties": {
              "lastSeen": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "example": "2024-01-01T12:00:00.000Z"
              },
              "ip": {
                "type": "string",
                "nullable": true,
                "example": "192.168.1.1"
              },
              "statusId": {
                "type": "integer",
                "example": 1,
                "description": "User status: 0=inactive/deleted, 1=active"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "example": "2024-01-01T12:00:00.000Z"
              }
            }
          }
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Error message description"
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Operation completed successfully"
          },
          "data": {
            "type": "object",
            "description": "Response data (varies by endpoint)"
          }
        }
      },
      "MCPRequest": {
        "type": "object",
        "required": [
          "jsonrpc",
          "method"
        ],
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0",
            "description": "JSON-RPC version"
          },
          "id": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "example": "1",
            "description": "Request identifier"
          },
          "method": {
            "type": "string",
            "example": "initialize",
            "description": "MCP method name"
          },
          "params": {
            "type": "object",
            "description": "Method parameters"
          },
          "stream": {
            "type": "boolean",
            "example": false,
            "description": "Whether to stream the response"
          }
        }
      },
      "MCPResponse": {
        "type": "object",
        "required": [
          "jsonrpc"
        ],
        "properties": {
          "jsonrpc": {
            "type": "string",
            "example": "2.0"
          },
          "id": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "example": "1"
          },
          "result": {
            "type": "object",
            "description": "Success result"
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "number",
                "example": -32601
              },
              "message": {
                "type": "string",
                "example": "Method not found"
              },
              "data": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request - Invalid input data",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "message": {
                      "example": "Invalid input data"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - Invalid or missing authentication",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "message": {
                      "example": "Invalid or missing authentication token"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - Insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "message": {
                      "example": "Insufficient permissions to access this resource"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found - Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "message": {
                      "example": "Resource not found"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict - Resource already exists",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "message": {
                      "example": "Resource already exists"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "message": {
                      "example": "Internal server error"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "tags": {
      "0": {
        "name": "MCP",
        "description": "Model Context Protocol endpoints"
      }
    }
  },
  "paths": {
    "/v1/auth-public/reset-password/request": {
      "post": {
        "summary": "Request password reset",
        "description": "Request a password reset link for a user account",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset request processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "If the email address you provided matches a registered account, we will send instructions to reset your password."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth-public/reset-password/validate-token": {
      "post": {
        "summary": "Validate password reset token",
        "description": "Validate a password reset token without resetting the password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "abc123def456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Token is valid"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/auth-public/reset-password/confirm": {
      "post": {
        "summary": "Confirm password reset",
        "description": "Reset user password using a valid reset token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "abc123def456"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "newpassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Create a new user account with email, phone, password, and personal information",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "phone",
                  "password",
                  "firstName",
                  "lastName"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "phone": {
                    "type": "string",
                    "example": "+1234567890"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                  },
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticate user with email and password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/auth/csrf-token": {
      "get": {
        "summary": "Get CSRF token",
        "description": "Generate and retrieve a CSRF token for secure form submissions",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "CSRF token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "csrfToken": {
                          "type": "string",
                          "example": "abc123def456"
                        },
                        "sessionId": {
                          "type": "string",
                          "example": "sess_789xyz"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/verify": {
      "get": {
        "summary": "Verify JWT token",
        "description": "Verify the validity of a JWT token and return user information",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "01234567-89ab-cdef-0123-456789abcdef"
                            },
                            "email": {
                              "type": "string",
                              "example": "user@example.com"
                            },
                            "firstName": {
                              "type": "string",
                              "example": "John"
                            },
                            "lastName": {
                              "type": "string",
                              "example": "Doe"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/auth/verify-email": {
      "get": {
        "summary": "Verify user email",
        "description": "Verify user email using the verification token sent to their email",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Verification token"
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Email verified successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/auth/google-login": {
      "post": {
        "summary": "Google OAuth login",
        "description": "Authenticate user with Google OAuth credential",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "credential"
                ],
                "properties": {
                  "credential": {
                    "type": "string",
                    "description": "Base64 encoded Google user info"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/client": {
      "get": {
        "summary": "Get clients for authenticated user",
        "description": "Retrieve a list of clients. If user has 'canManage(\"clients\")' permission, shows all clients. Otherwise, shows only clients associated with the user through client_user_maps.",
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search term to filter clients by name or description",
            "schema": {
              "type": "string",
              "example": "company"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Clients retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Clients retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "clients": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "01234567-89ab-cdef-0123-456789abcdef"
                              },
                              "name": {
                                "type": "string",
                                "example": "Company ABC"
                              },
                              "description": {
                                "type": "string",
                                "example": "Main client company"
                              },
                              "parentId": {
                                "type": "string",
                                "nullable": true,
                                "example": "01234567-89ab-cdef-0123-456789abcdef"
                              },
                              "metadata": {
                                "type": "object",
                                "nullable": true
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "statusId": {
                                "type": "integer",
                                "example": 1
                              },
                              "userRole": {
                                "type": "string",
                                "nullable": true,
                                "example": "admin"
                              }
                            }
                          }
                        },
                        "total": {
                          "type": "integer",
                          "example": 5
                        },
                        "canManage": {
                          "type": "boolean",
                          "example": false,
                          "description": "Indicates if the user has manage permission for clients"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create new client",
        "description": "Create a new client (requires create permission on clients resource)",
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Company ABC"
                  },
                  "description": {
                    "type": "string",
                    "example": "Main client company"
                  },
                  "parentId": {
                    "type": "string",
                    "example": "01234567-89ab-cdef-0123-456789abcdef"
                  },
                  "metadata": {
                    "type": "object",
                    "example": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client created successfully"
          },
          "400": {
            "description": "Bad request - Missing required fields"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict - Client already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/client/{id}": {
      "get": {
        "summary": "Get specific client",
        "description": "Retrieve information about a specific client by ID (requires read permission on clients resource)",
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Client ID",
            "schema": {
              "type": "string",
              "example": "01234567-89ab-cdef-0123-456789abcdef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Client not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update client",
        "description": "Update an existing client (requires edit permission on clients resource)",
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Client ID",
            "schema": {
              "type": "string",
              "example": "01234567-89ab-cdef-0123-456789abcdef"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Company Name"
                  },
                  "description": {
                    "type": "string",
                    "example": "Updated description"
                  },
                  "parentId": {
                    "type": "string",
                    "example": "01234567-89ab-cdef-0123-456789abcdef"
                  },
                  "metadata": {
                    "type": "object",
                    "example": {}
                  },
                  "statusId": {
                    "type": "integer",
                    "example": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Client not found"
          },
          "409": {
            "description": "Conflict - Client name already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete client",
        "description": "Soft delete a client by setting status_id to 1 (requires manage permission on clients resource)",
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Client ID",
            "schema": {
              "type": "string",
              "example": "01234567-89ab-cdef-0123-456789abcdef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Client not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/configuration": {
      "get": {
        "summary": "List all configurations",
        "description": "Retrieve a list of all configurations (requires read permission on configuration resource)",
        "tags": [
          "Configuration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Configurations retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "configurations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Configuration"
                          }
                        },
                        "permissions": {
                          "type": "object",
                          "properties": {
                            "canManage": {
                              "type": "boolean"
                            },
                            "canCreate": {
                              "type": "boolean"
                            },
                            "canEdit": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create new configuration",
        "description": "Create a new configuration (requires create permission on configuration resource)",
        "tags": [
          "Configuration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "section",
                  "key",
                  "value"
                ],
                "properties": {
                  "section": {
                    "type": "string",
                    "example": "security"
                  },
                  "key": {
                    "type": "string",
                    "example": "jwt.expiry"
                  },
                  "value": {
                    "type": "string",
                    "example": "24h"
                  },
                  "description": {
                    "type": "string",
                    "example": "JWT token expiry time"
                  },
                  "clientId": {
                    "type": "string",
                    "example": "01234567-89ab-cdef-0123-456789abcdef"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Configuration created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Configuration"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/configuration/{id}": {
      "get": {
        "summary": "Get specific configuration",
        "description": "Retrieve information about a specific configuration by ID (requires read permission on configuration resource)",
        "tags": [
          "Configuration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Configuration ID",
            "schema": {
              "type": "string",
              "example": "01234567-89ab-cdef-0123-456789abcdef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Configuration retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Configuration"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update configuration",
        "description": "Update an existing configuration (requires edit permission on configuration resource)",
        "tags": [
          "Configuration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Configuration ID",
            "schema": {
              "type": "string",
              "example": "01234567-89ab-cdef-0123-456789abcdef"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "section": {
                    "type": "string",
                    "example": "security"
                  },
                  "key": {
                    "type": "string",
                    "example": "jwt.expiry"
                  },
                  "value": {
                    "type": "string",
                    "example": "48h"
                  },
                  "description": {
                    "type": "string",
                    "example": "JWT token expiry time (updated)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Configuration updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Configuration"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete configuration",
        "description": "Delete a configuration (requires manage permission on configuration resource)",
        "tags": [
          "Configuration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Configuration ID",
            "schema": {
              "type": "string",
              "example": "01234567-89ab-cdef-0123-456789abcdef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Configuration deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/configuration/key/{key}": {
      "get": {
        "summary": "Get specific configuration by key",
        "description": "Retrieve a specific configuration value by key (requires read permission on configuration resource)",
        "tags": [
          "Configuration"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "description": "Configuration key",
            "schema": {
              "type": "string",
              "example": "ai.stream"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Configuration retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "example": "ai.stream"
                        },
                        "value": {
                          "type": "string",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/conversations": {
      "post": {
        "summary": "Create a new conversation",
        "description": "Create a new conversation with initial message",
        "tags": [
          "Conversations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the conversation"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "content"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Chat about AI"
                  },
                  "content": {
                    "type": "string",
                    "example": "Tell me about artificial intelligence"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Conversation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Conversation created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "conversation": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "title": {
                              "type": "string"
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "content": {
                              "type": "string"
                            },
                            "role": {
                              "type": "string",
                              "enum": [
                                "user",
                                "assistant",
                                "system"
                              ]
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all conversations",
        "description": "Retrieve all conversations for the authenticated user with optional client filtering",
        "tags": [
          "Conversations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for filtering conversations"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of conversations per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Conversations retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "conversations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "title": {
                                "type": "string"
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "last_message_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "is_archived": {
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "totalPages": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/conversations/{id}": {
      "get": {
        "summary": "Get a specific conversation",
        "description": "Retrieve a specific conversation by ID with its messages",
        "tags": [
          "Conversations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Conversation ID"
          },
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for validation"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Conversation retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "content": {
                                "type": "string"
                              },
                              "role": {
                                "type": "string"
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found"
          }
        }
      },
      "put": {
        "summary": "Update a conversation",
        "description": "Update conversation title and other properties",
        "tags": [
          "Conversations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Conversation ID"
          },
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for validation"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Updated conversation title"
                  },
                  "is_archived": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Conversation updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Conversation updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string"
                        },
                        "is_archived": {
                          "type": "boolean"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a conversation",
        "description": "Soft delete a conversation (sets deleted_at timestamp)",
        "tags": [
          "Conversations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Conversation ID"
          },
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for validation"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Conversation deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found"
          }
        }
      }
    },
    "/v1/group-permissions/{id}": {
      "get": {
        "summary": "Get group permissions",
        "description": "Get group permissions by ID",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the conversation"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID of the group permission",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group permissions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Group permissions retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "group_permissions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GroupPermission"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/group-permissions": {
      "post": {
        "summary": "Create group permission",
        "description": "Create a new group permission",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the conversation"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "group_id",
                  "name"
                ],
                "properties": {
                  "group_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the group"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the permission"
                  },
                  "resource": {
                    "type": "string",
                    "description": "Resource name"
                  },
                  "action": {
                    "type": "string",
                    "description": "Action name"
                  },
                  "order": {
                    "type": "integer",
                    "description": "Display order"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group permission created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Group permission created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "group_permission": {
                          "$ref": "#/components/schemas/GroupPermission"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/group-permissions/{permissionId}": {
      "put": {
        "summary": "Update group permission",
        "description": "Update an existing group permission",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the conversation"
          },
          {
            "in": "path",
            "name": "permissionId",
            "required": true,
            "description": "ID of the group permission to update",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the permission"
                  },
                  "resource": {
                    "type": "string",
                    "description": "Resource name"
                  },
                  "action": {
                    "type": "string",
                    "description": "Action name"
                  },
                  "order": {
                    "type": "integer",
                    "description": "Display order"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group permission updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Group permission updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "group_permission": {
                          "$ref": "#/components/schemas/GroupPermission"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete group permission",
        "description": "Delete a group permission (soft delete by setting status_id to 0)",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the conversation"
          },
          {
            "in": "path",
            "name": "permissionId",
            "required": true,
            "description": "ID of the group permission to delete",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group permission deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Group permission deleted successfully"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groups": {
      "get": {
        "summary": "List all active groups",
        "description": "Retrieve a list of all active groups (status_id=0) with optional search filtering (requires read permission on groups resource)",
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search term to filter groups by name or description",
            "schema": {
              "type": "string",
              "example": "admin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Groups retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "groups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Group"
                          }
                        },
                        "requestedBy": {
                          "$ref": "#/components/schemas/User"
                        },
                        "permissions": {
                          "type": "object",
                          "properties": {
                            "canManage": {
                              "type": "boolean"
                            },
                            "canCreate": {
                              "type": "boolean"
                            },
                            "canEdit": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create new group",
        "description": "Create a new group (requires create permission on groups resource)",
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Administrators"
                  },
                  "description": {
                    "type": "string",
                    "example": "System administrators group"
                  },
                  "clientId": {
                    "type": "string",
                    "example": "01234567-89ab-cdef-0123-456789abcdef"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Group created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/groups/{id}": {
      "get": {
        "summary": "Get specific group",
        "description": "Retrieve information about a specific group by ID (requires read permission on groups resource)",
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Group ID",
            "schema": {
              "type": "string",
              "example": "01234567-89ab-cdef-0123-456789abcdef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Group retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update group",
        "description": "Update an existing group (requires edit permission on groups resource)",
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Group ID",
            "schema": {
              "type": "string",
              "example": "01234567-89ab-cdef-0123-456789abcdef"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Group Name"
                  },
                  "description": {
                    "type": "string",
                    "example": "Updated group description"
                  },
                  "statusId": {
                    "type": "integer",
                    "example": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Group updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete group",
        "description": "Soft delete a group by setting status_id to 1 (requires manage permission on groups resource)",
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Group ID",
            "schema": {
              "type": "string",
              "example": "01234567-89ab-cdef-0123-456789abcdef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Group deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/messages": {
      "post": {
        "summary": "Create a new message",
        "description": "Add a new message to an existing conversation",
        "tags": [
          "Messages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the messages"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "conversation_id",
                  "content",
                  "role"
                ],
                "properties": {
                  "conversation_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "parent_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174001"
                  },
                  "content": {
                    "type": "string",
                    "example": "This is a message content"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "user",
                      "assistant",
                      "system"
                    ],
                    "example": "user"
                  },
                  "model": {
                    "type": "string",
                    "example": "gpt-3.5-turbo"
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "example": 10
                  },
                  "completion_tokens": {
                    "type": "integer",
                    "example": 20
                  },
                  "total_tokens": {
                    "type": "integer",
                    "example": 30
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Message created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "content": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "user",
                            "assistant",
                            "system"
                          ]
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/messages/streaming": {
      "post": {
        "summary": "Create a streaming assistant message",
        "description": "Create an empty assistant message for streaming updates",
        "tags": [
          "Messages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the conversation"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "conversation_id"
                ],
                "properties": {
                  "conversation_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "parent_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174001"
                  },
                  "model": {
                    "type": "string",
                    "example": "gpt-3.5-turbo"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Streaming message created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Streaming message created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/messages/{id}": {
      "patch": {
        "summary": "Update a message",
        "description": "Update an existing message (used for streaming updates)",
        "tags": [
          "Messages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the conversation"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Message ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "example": "Updated content"
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "example": 10
                  },
                  "completion_tokens": {
                    "type": "integer",
                    "example": 20
                  },
                  "total_tokens": {
                    "type": "integer",
                    "example": 30
                  },
                  "latency_ms": {
                    "type": "integer",
                    "example": 500
                  },
                  "status_id": {
                    "type": "integer",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Message updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/user": {
      "get": {
        "summary": "List all users",
        "description": "Retrieve a list of all users with optional search filtering (requires read permission on user resource)",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the messages"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search term to filter users by first name, last name, email, or phone",
            "schema": {
              "type": "string",
              "example": "john"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Users retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserWithStatus"
                          }
                        },
                        "requestedBy": {
                          "$ref": "#/components/schemas/User"
                        },
                        "permissions": {
                          "type": "object",
                          "properties": {
                            "canManage": {
                              "type": "boolean"
                            },
                            "canCreate": {
                              "type": "boolean"
                            },
                            "canEdit": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create new user",
        "description": "Create a new user (requires create permission on user resource)",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the messages"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "firstName",
                  "lastName",
                  "phone"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "newuser@example.com"
                  },
                  "firstName": {
                    "type": "string",
                    "example": "Jane"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Smith"
                  },
                  "phone": {
                    "type": "string",
                    "example": "+1234567890"
                  },
                  "alias": {
                    "type": "string",
                    "example": "jsmith"
                  },
                  "description": {
                    "type": "string",
                    "example": "Marketing Manager"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserWithStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/user/permission": {
      "get": {
        "summary": "Get user permissions",
        "description": "Retrieve the current user's permissions and group memberships",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-client-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Client ID for multi-tenant support"
          }
        ],
        "responses": {
          "200": {
            "description": "User permissions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Permission retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "userGroupsPermissions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "groupId": {
                                "type": "integer",
                                "description": "Group ID"
                              },
                              "groupName": {
                                "type": "string",
                                "description": "Group name"
                              },
                              "permissions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "resource": {
                                      "type": "string",
                                      "description": "Resource name"
                                    },
                                    "action": {
                                      "type": "string",
                                      "description": "Permission action"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to access user data"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/{id}": {
      "get": {
        "summary": "Get specific user",
        "description": "Retrieve information about a specific user by ID (requires read permission on user resource)",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the messages"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "example": "01234567-89ab-cdef-0123-456789abcdef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserWithStatus"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/user/profile/me": {
      "get": {
        "summary": "Get current user profile",
        "description": "Retrieve the profile of the currently authenticated user",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Client-ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Client ID for the messages"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "profile": {
                          "$ref": "#/components/schemas/UserWithStatus"
                        },
                        "permissions": {
                          "type": "object",
                          "properties": {
                            "canReadUsers": {
                              "type": "boolean"
                            },
                            "canCreateUsers": {
                              "type": "boolean"
                            },
                            "canEditUsers": {
                              "type": "boolean"
                            },
                            "canManageUsers": {
                              "type": "boolean"
                            },
                            "canReadPayroll": {
                              "type": "boolean"
                            },
                            "canManageAll": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/version": {
      "get": {
        "summary": "Get application version information",
        "description": "Returns application name, version, build date, and git commit hash",
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "Application version information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "app": {
                      "type": "string",
                      "description": "Application name from environment",
                      "example": "AI-Powered Dashboard"
                    },
                    "version": {
                      "type": "string",
                      "description": "Application version from environment",
                      "example": "8.17.0"
                    },
                    "build_date": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Build timestamp",
                      "example": "2025-08-17T10:10:10Z"
                    },
                    "build_version": {
                      "type": "string",
                      "description": "Git commit hash",
                      "example": "1xqw461"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ai/chat/completions": {
      "post": {
        "summary": "AI Chat Completions",
        "description": "Proxy endpoint for AI chat completions. Forwards requests to the configured AI service.",
        "tags": [
          "AI"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "type": "string",
                    "example": "carik/gpt-6-mini"
                  },
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "example": "user"
                        },
                        "content": {
                          "type": "string",
                          "example": "Hello, how are you?"
                        }
                      }
                    }
                  },
                  "temperature": {
                    "type": "number",
                    "example": 0.7
                  },
                  "stream": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response from AI service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/example": {
      "get": {
        "summary": "Get examples list",
        "description": "Retrieve a list of examples with optional search functionality. Only returns active examples (status_id != 1).<br>👉 Refer to the sample code in <code>'server/modules/example/*'</code>.",
        "tags": [
          "Example"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-client-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Client ID for multi-tenant access"
          },
          {
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter examples by name or description (case-insensitive)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved examples list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Examples retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Example ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Example name"
                          },
                          "description": {
                            "type": "string",
                            "description": "Example description"
                          },
                          "external": {
                            "type": "boolean",
                            "description": "External flag"
                          },
                          "client_id": {
                            "type": "string",
                            "description": "Client ID"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Creation timestamp"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Last update timestamp"
                          },
                          "status_id": {
                            "type": "integer",
                            "description": "Status ID (0 = active, 1 = inactive)",
                            "example": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new example",
        "description": "Create a new example with the provided data. Name must be unique within the client.<br>👉 Refer to the sample code in <code>'server/modules/example/*'</code>.",
        "tags": [
          "Example"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-client-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Client ID for multi-tenant access"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Example name (must be unique within client)",
                    "example": "My Example"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "Example description",
                    "example": "This is an example description"
                  },
                  "external": {
                    "type": "boolean",
                    "nullable": true,
                    "description": "External flag",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Example created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Example created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Generated example ID (UUIDv7)"
                        },
                        "clientId": {
                          "type": "string",
                          "description": "Client ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Example name"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Example description"
                        },
                        "external": {
                          "type": "boolean",
                          "description": "External flag"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation timestamp"
                        },
                        "statusId": {
                          "type": "integer",
                          "description": "Status ID (0 = active)",
                          "example": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Name is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Example with same name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Example with this name \"My Example\" already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/example/{id}": {
      "get": {
        "summary": "Get example detail by ID",
        "description": "Retrieve detailed information of a specific example by its ID.<br>👉 Refer to the sample code in <code>'server/modules/example/*'</code>.",
        "tags": [
          "Example"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-client-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Client ID for multi-tenant access"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Example ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved example detail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Example retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Example ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Example name"
                        },
                        "description": {
                          "type": "string",
                          "description": "Example description"
                        },
                        "external": {
                          "type": "boolean",
                          "description": "External flag"
                        },
                        "metadata": {
                          "type": "object",
                          "nullable": true,
                          "description": "Additional metadata"
                        },
                        "client_id": {
                          "type": "string",
                          "description": "Client ID"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation timestamp"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Last update timestamp"
                        },
                        "status_id": {
                          "type": "integer",
                          "description": "Status ID (0 = active, 1 = inactive)",
                          "example": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Example not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Example not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing example",
        "description": "Update an existing example with the provided data. Name must be unique within the client if changed.<br>👉 Refer to the sample code in <code>'server/modules/example/*'</code>.",
        "tags": [
          "Example"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-client-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Client ID for multi-tenant access"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Example ID to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Example name (must be unique within client)",
                    "example": "Updated Example Name"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "Example description",
                    "example": "Updated description"
                  },
                  "external": {
                    "type": "boolean",
                    "nullable": true,
                    "description": "External flag",
                    "example": false
                  },
                  "metadata": {
                    "type": "object",
                    "nullable": true,
                    "description": "Additional metadata",
                    "example": {
                      "key": "value"
                    }
                  },
                  "status_id": {
                    "type": "integer",
                    "description": "Status ID (0 = active, 1 = inactive)",
                    "example": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Example updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Example updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Example ID"
                        },
                        "clientId": {
                          "type": "string",
                          "description": "Client ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Updated example name"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Updated example description"
                        },
                        "external": {
                          "type": "boolean",
                          "nullable": true,
                          "description": "Updated external flag"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Original creation timestamp"
                        },
                        "statusId": {
                          "type": "integer",
                          "description": "Updated status ID",
                          "example": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Example not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Example not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Example with same name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Example with this name \"Updated Example Name\" already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an example (soft delete)",
        "description": "Soft delete an example by setting its status_id to 1 (inactive). The example will no longer appear in active lists but remains in the database.<br>👉 Refer to the sample code in <code>'server/modules/example/*'</code>.",
        "tags": [
          "Example"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-client-id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Client ID for multi-tenant access"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Example ID to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Example deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Example deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires MANAGE permission)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Insufficient permissions"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Example not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Example not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/health": {
      "get": {
        "summary": "Health check",
        "description": "Check if the server is running and healthy",
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "Server is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "OK"
                    },
                    "message": {
                      "type": "string",
                      "example": "Server is running"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}